@page "/"
@using System.Security.Cryptography
@using System.Text
@using System.IO.Pipelines
@using Services
@rendermode InteractiveServer
@inject IEncryptFileService EncryptService
@inject IJSRuntime Js

<PageTitle>Encrypt / Decrypt file</PageTitle>

<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
        <button @onclick="ClearFields" class="nav-link active" id="encrypt-tab" data-bs-toggle="tab" data-bs-target="#encrypt-tab-content" type="button" role="tab" aria-controls="encrypt-tab-content" aria-selected="true">Encrypt</button>
    </li>
    <li class="nav-item" role="presentation">
        <button @onclick="ClearFields" class="nav-link" id="decrypt-tab" data-bs-toggle="tab" data-bs-target="#decrypt-tab-content" type="button" role="tab" aria-controls="decrypt-tab-content" aria-selected="false">Decrypt</button>
    </li>
</ul>

<!-- Tab panes -->
<div class="tab-content mt-3">
    <div class="tab-pane active col-3" id="encrypt-tab-content" role="tabpanel" aria-labelledby="encrypt-tab">

        <div class="mb-3">
            <p>Password to encrypt with</p>
            <InputText type="password" @bind-Value="_password" class="form-control"/>
        </div>
        <div class="mb-4">
            <p>Choose a file to encrypt</p>
            <InputFile class="upload-file-button" OnChange="ChangeUploadFile"/>
        </div>
        <div class="d-flex justify-content-center">
            <button type="button" @onclick="EncryptFile" class="btn btn-primary text-white align-self-center col-6">Encrypt</button>
        </div>
    </div>
    <div class="tab-pane col-3" id="decrypt-tab-content" role="tabpanel" aria-labelledby="decrypt-tab">
        <div class="mb-3">
            <p>Password used to encrypt with</p>
            <InputText type="password" @bind-Value="_password" class="form-control"></InputText>
        </div>
        <div class="mb-4">
            <p>Choose a file to decrypt</p>
            <InputFile class="upload-file-button" OnChange="ChangeUploadFile"/>
        </div>
        <div class="d-flex justify-content-center">
            <button type="button" @onclick="DecryptFile" class="btn btn-primary text-white col-6">Decrypt</button>
        </div>
    </div>
</div>

<script>
  window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    console.log(blob);
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
  }
  
  window.clearFileInputs = async () => {
    for(const element of document.getElementsByClassName("upload-file-button")){
        element.value = "";
    }
  }
</script>

@code
{
    private string? _password;
    private IBrowserFile? _uploadedFile;

    private async Task EncryptFile()
    {
        if (_uploadedFile == null) return;

        byte[] buffer = await ConvertFileToBytes(_uploadedFile);
        using MemoryStream outputFile = await EncryptService.EncryptFile(_password, buffer);
        await DownloadFileFromStream(outputFile, _uploadedFile.Name);
    }

    private async Task DecryptFile()
    {
        if (_uploadedFile == null) return;

        byte[] buffer = await ConvertFileToBytes(_uploadedFile);
        using MemoryStream outputFile = await EncryptService.DecryptFile(_password, buffer);
        await DownloadFileFromStream(outputFile, _uploadedFile.Name);
    }

    private static async Task<byte[]> ConvertFileToBytes(IBrowserFile file)
    {
        await using Stream stream = file.OpenReadStream();
        byte[] buffer = new byte[stream.Length];
        await stream.ReadAsync(buffer);
        return buffer;
    }

    private async Task DownloadFileFromStream(Stream stream, string fileName)
    {
        stream.Position = 0;
        using DotNetStreamReference streamReference = new DotNetStreamReference(stream);
        await Js.InvokeVoidAsync("downloadFileFromStream", fileName, streamReference);
    }

    private async Task ClearFields()
    {
        _password = string.Empty;
        _uploadedFile = null;

        await Js.InvokeVoidAsync("clearFileInputs");
    }

    private void ChangeUploadFile(InputFileChangeEventArgs args)
    {
        _uploadedFile = args.File;
    }
}